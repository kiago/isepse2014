Git Commands :
--------------
	Local :
	- git clone
	- git add *
	- git commit
	- git status
	- git log


	Autre :
	- git push
	- git pull


Linux commands :
-------------------
	Cut : cut out selected portions of Each line of a file

	Nano, vim : text editors
	
	Cd ~ : go home
	
	Ctrl + c : end command

	grep : search for a string in a specific file
	—> grep "string" file.txt
	---------------------------------------------

	find : find where what (recursive)
	—> find .[here] -name « .git »
	---------------------------------------------

	less: less file, allows to see the file in the console
	---------------------------------------------

	man: man cmd, allows to see how the command works
	---------------------------------------------

	mkdir: mkdir name_directory, create a directory
	---------------------------------------------

	chmod : changes the permissions for a file
	---------------------------------------------

	To create a bash script, we need to put this line at the beginning of the script :
	#!/bin/bash (shebang. it tells the shell what program to interpret the script with, when executed. here it is interpretated in bash)
	---------------------------------------------

	To rename or move a file : mv
	--> mv "file1.txt" to "file2.txt"



----------------------
28/04/2014
----------------------

- Interpretated language → REPL environnement (Read Eval Print Loop) (Reading which is entered, evaluation , printing and loop)

Absolute name: path to open a file from the root

Attention: Upper & lower case are important
Convention: uppercase variables

Access the contents of a variable: $ variable
Show variable : echo $ variable

BASH interpreter mainly strings

Exercise: Find the list of shells used on the machine
→ Order: Cut -d :-f 7 / etc / passwd
the same rank + number of occurrences and removing duplicates :
→ cut-d :-f 7 / etc / passwd | sort | uniq- c | sort- n


append >>
<
> overwrite
 
Exercise: on retrieves all the words of the site and they are classified by the number of occurrences and the first 10 results are displayed ( head)
→ curl www.gutenberg.org/cache/epub/45495/pg45495.txt | tr- s -c [: alpha:] '\ n' | tr "AZ" "az" | sort | uniq- c | sort- n -r | head


----------------------
26/05/2014 :
----------------------

list of chars with a special meaning in a regex:
    ^ : finds the start of a line
    $ : finds the end of a line
    . : finds any character
   * : repeats the previous expression 0 to n times
   \+ (or + when using the -r flag) : repeats the previous expression 1 to n times
   \? (or ? when using the -r flag) : repeats the previous expression 0 or 1 time
   \{1,3\} : repeats the previous expression 1 to 3 times
      Example : [A-Z]\{1,3\} find
          ABD, DEF, LOC, AB, EO, A, F, Z ...
    [ : starts a character from these possible characters 
    ] : ends a sequence of alternative characters to find 
        Example : [abc] finds a or b or c
         Example : [12a] finds 1 or 2 or a
    \| : means "or" in a group \(abc\|def\)
    \[ : finds the "[" character    
    \( : starts a group  Example:   sed -e "s/^\([A-Z][a-z]*\) \([A-Z][a-z]*\)$/\2 \1/g"
    Example (abc) : finds "abc" and makes the match accessible throug a number like \1
    \1 : refer to the match content of the group 1
    * : the previous occurrence recurring 0 or plus
    a* : finds "" "a" "aa" "aaaaaaa"
    [abc]* : finds "" "abc" "aa" "acccc" "aaabbbbb"
    [abc]* "abcd" => "abc" 
    
    sed -e -r "s/\(abc\)+/g" input.txt

sed -n : quiet
sed -n "//p" : print


-----------------------
Script parameters :
$0  Contient le nom du script tel qu'il a été invoqué
$*  L'ensembles des paramètres sous la forme d'un seul argument
$@  L'ensemble des arguments, un argument par paramètre
$#  Le nombre de paramètres passés au script
$?  Le code retour de la dernière commande
$$  Le PID su shell qui exécute le script
$!  Le PID du dernier processus lancé en arrière-plan