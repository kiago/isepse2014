Notes perso :

« ^\(abc\)*$ » : match toutes les lignes contenant abcabcabcabc….abc.
« ^\(abc\)/1$ » : match toutes les lignes contenant abcabcXXXXXXXXX.

Recherche tous les groupes commençant par abc et les remplacer par le contenu du premier groupe
Sed –e « s/^\(abc\).*$ /\1/g$ » test.txt
1/g = remplace le contenu par celui du premier groupe (abc)

Autre exemple : inverser premier groupe et deuxième groupe sur une phrase

Sed –e « s/^\([A-Z][a-z]*\) \([A-Z][a-z]*\) /\$2\1/g »

Recherche un ou un autre groupe de caractères
\(abc\|def\)

Cours prof :

list of chars with a special meaning in a regex:
    ^ : finds the start of a line
    $ : finds the end of a line
    . : finds any character
   * : repeats the previous expression 0 to n times
   \+ (or + when using the -r flag) : repeats the previous expression 1 to n times
   \? (or ? when using the -r flag) : repeats the previous expression 0 or 1 time
   \{1,3\} : repeats the previous expression 1 to 3 times
      Example : [A-Z]\{1,3\} find
          ABD, DEF, LOC, AB, EO, A, F, Z ...
    [ : starts a character from these possible characters 
    ] : ends a sequence of alternative characters to find 
        Example : [abc] finds a or b or c
         Example : [12a] finds 1 or 2 or a
    \| : means "or" in a group \(abc\|def\)
    \[ : finds the "[" character    
    \( : starts a group  Example:   sed -e "s/^\([A-Z][a-z]*\) \([A-Z][a-z]*\)$/\2 \1/g"
    Example (abc) : finds "abc" and makes the match accessible throug a number like \1
    \1 : refer to the match content of the group 1
    * : the previous occurrence recurring 0 or plus
    a* : finds "" "a" "aa" "aaaaaaa"
    [abc]* : finds "" "abc" "aa" "acccc" "aaabbbbb"
    [abc]* "abcd" => "abc" 
    
    sed -e -r "s/\(abc\)+/g" input.txt

TD questions cours du 26 mai 2014




